//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputs/PlayerInput2.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput2 : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput2()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput2"",
    ""maps"": [
        {
            ""name"": ""CharacterControls1"",
            ""id"": ""49e69fa5-fda1-4300-a82a-a0a34e32dfb5"",
            ""actions"": [
                {
                    ""name"": ""Movement2"",
                    ""type"": ""PassThrough"",
                    ""id"": ""58bf556a-bfdc-4e55-967a-baab414a1920"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teclado"",
                    ""type"": ""Value"",
                    ""id"": ""273572a9-e88b-4a3b-8278-d3c73c838dc5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Salto"",
                    ""type"": ""Button"",
                    ""id"": ""fb215c09-687f-48d6-bc71-8bda118de4f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PunchLeft"",
                    ""type"": ""Button"",
                    ""id"": ""239ad479-84ed-482c-af75-4bebbb329197"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PunchRight"",
                    ""type"": ""Button"",
                    ""id"": ""c0f8ee01-a952-43db-9bdf-95bcc1d4f0e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TEST"",
                    ""type"": ""Button"",
                    ""id"": ""c3e8104a-e1e0-446c-8a75-4ea0f90976eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TEST2"",
                    ""type"": ""Button"",
                    ""id"": ""7d7834d5-2d8b-45bb-9103-2c4c1f944de9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""817b2d4a-f70f-43da-9fe9-60663ab8b930"",
                    ""path"": ""<DualShockGamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3dda7fda-bb72-4914-b68f-c1fe83422f70"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d704c99-a685-4cbf-a88b-e7b6763db45d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teclado"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""406c2f3d-c114-48be-8175-67989ede3baf"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teclado"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b3d92a2c-f5d5-426c-95d3-e878ef089bfc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teclado"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""44d20b94-cc66-468d-bb5c-0b83f9d8ff6c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teclado"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9586d61a-ee2d-4b5d-b96b-1c5ef5107575"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teclado"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4b4aaa48-5410-4266-968d-3ec6bdbfafb8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teclado"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""460141d9-1cde-46e8-9c4e-327d961ad355"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Salto"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd925032-91ce-4e0b-ac52-65c660a4ac2f"",
                    ""path"": ""<DualShockGamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PunchLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""284414f7-977f-4410-9117-7eb87a53167a"",
                    ""path"": ""<DualShockGamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PunchRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0149e814-35d4-4c6e-9b6d-fd7069af0653"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TEST"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4af7c5a-9de8-4034-8edf-0a02a45977f6"",
                    ""path"": ""<DualShockGamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TEST2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterControls1
        m_CharacterControls1 = asset.FindActionMap("CharacterControls1", throwIfNotFound: true);
        m_CharacterControls1_Movement2 = m_CharacterControls1.FindAction("Movement2", throwIfNotFound: true);
        m_CharacterControls1_Teclado = m_CharacterControls1.FindAction("Teclado", throwIfNotFound: true);
        m_CharacterControls1_Salto = m_CharacterControls1.FindAction("Salto", throwIfNotFound: true);
        m_CharacterControls1_PunchLeft = m_CharacterControls1.FindAction("PunchLeft", throwIfNotFound: true);
        m_CharacterControls1_PunchRight = m_CharacterControls1.FindAction("PunchRight", throwIfNotFound: true);
        m_CharacterControls1_TEST = m_CharacterControls1.FindAction("TEST", throwIfNotFound: true);
        m_CharacterControls1_TEST2 = m_CharacterControls1.FindAction("TEST2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterControls1
    private readonly InputActionMap m_CharacterControls1;
    private ICharacterControls1Actions m_CharacterControls1ActionsCallbackInterface;
    private readonly InputAction m_CharacterControls1_Movement2;
    private readonly InputAction m_CharacterControls1_Teclado;
    private readonly InputAction m_CharacterControls1_Salto;
    private readonly InputAction m_CharacterControls1_PunchLeft;
    private readonly InputAction m_CharacterControls1_PunchRight;
    private readonly InputAction m_CharacterControls1_TEST;
    private readonly InputAction m_CharacterControls1_TEST2;
    public struct CharacterControls1Actions
    {
        private @PlayerInput2 m_Wrapper;
        public CharacterControls1Actions(@PlayerInput2 wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement2 => m_Wrapper.m_CharacterControls1_Movement2;
        public InputAction @Teclado => m_Wrapper.m_CharacterControls1_Teclado;
        public InputAction @Salto => m_Wrapper.m_CharacterControls1_Salto;
        public InputAction @PunchLeft => m_Wrapper.m_CharacterControls1_PunchLeft;
        public InputAction @PunchRight => m_Wrapper.m_CharacterControls1_PunchRight;
        public InputAction @TEST => m_Wrapper.m_CharacterControls1_TEST;
        public InputAction @TEST2 => m_Wrapper.m_CharacterControls1_TEST2;
        public InputActionMap Get() { return m_Wrapper.m_CharacterControls1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterControls1Actions set) { return set.Get(); }
        public void SetCallbacks(ICharacterControls1Actions instance)
        {
            if (m_Wrapper.m_CharacterControls1ActionsCallbackInterface != null)
            {
                @Movement2.started -= m_Wrapper.m_CharacterControls1ActionsCallbackInterface.OnMovement2;
                @Movement2.performed -= m_Wrapper.m_CharacterControls1ActionsCallbackInterface.OnMovement2;
                @Movement2.canceled -= m_Wrapper.m_CharacterControls1ActionsCallbackInterface.OnMovement2;
                @Teclado.started -= m_Wrapper.m_CharacterControls1ActionsCallbackInterface.OnTeclado;
                @Teclado.performed -= m_Wrapper.m_CharacterControls1ActionsCallbackInterface.OnTeclado;
                @Teclado.canceled -= m_Wrapper.m_CharacterControls1ActionsCallbackInterface.OnTeclado;
                @Salto.started -= m_Wrapper.m_CharacterControls1ActionsCallbackInterface.OnSalto;
                @Salto.performed -= m_Wrapper.m_CharacterControls1ActionsCallbackInterface.OnSalto;
                @Salto.canceled -= m_Wrapper.m_CharacterControls1ActionsCallbackInterface.OnSalto;
                @PunchLeft.started -= m_Wrapper.m_CharacterControls1ActionsCallbackInterface.OnPunchLeft;
                @PunchLeft.performed -= m_Wrapper.m_CharacterControls1ActionsCallbackInterface.OnPunchLeft;
                @PunchLeft.canceled -= m_Wrapper.m_CharacterControls1ActionsCallbackInterface.OnPunchLeft;
                @PunchRight.started -= m_Wrapper.m_CharacterControls1ActionsCallbackInterface.OnPunchRight;
                @PunchRight.performed -= m_Wrapper.m_CharacterControls1ActionsCallbackInterface.OnPunchRight;
                @PunchRight.canceled -= m_Wrapper.m_CharacterControls1ActionsCallbackInterface.OnPunchRight;
                @TEST.started -= m_Wrapper.m_CharacterControls1ActionsCallbackInterface.OnTEST;
                @TEST.performed -= m_Wrapper.m_CharacterControls1ActionsCallbackInterface.OnTEST;
                @TEST.canceled -= m_Wrapper.m_CharacterControls1ActionsCallbackInterface.OnTEST;
                @TEST2.started -= m_Wrapper.m_CharacterControls1ActionsCallbackInterface.OnTEST2;
                @TEST2.performed -= m_Wrapper.m_CharacterControls1ActionsCallbackInterface.OnTEST2;
                @TEST2.canceled -= m_Wrapper.m_CharacterControls1ActionsCallbackInterface.OnTEST2;
            }
            m_Wrapper.m_CharacterControls1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement2.started += instance.OnMovement2;
                @Movement2.performed += instance.OnMovement2;
                @Movement2.canceled += instance.OnMovement2;
                @Teclado.started += instance.OnTeclado;
                @Teclado.performed += instance.OnTeclado;
                @Teclado.canceled += instance.OnTeclado;
                @Salto.started += instance.OnSalto;
                @Salto.performed += instance.OnSalto;
                @Salto.canceled += instance.OnSalto;
                @PunchLeft.started += instance.OnPunchLeft;
                @PunchLeft.performed += instance.OnPunchLeft;
                @PunchLeft.canceled += instance.OnPunchLeft;
                @PunchRight.started += instance.OnPunchRight;
                @PunchRight.performed += instance.OnPunchRight;
                @PunchRight.canceled += instance.OnPunchRight;
                @TEST.started += instance.OnTEST;
                @TEST.performed += instance.OnTEST;
                @TEST.canceled += instance.OnTEST;
                @TEST2.started += instance.OnTEST2;
                @TEST2.performed += instance.OnTEST2;
                @TEST2.canceled += instance.OnTEST2;
            }
        }
    }
    public CharacterControls1Actions @CharacterControls1 => new CharacterControls1Actions(this);
    public interface ICharacterControls1Actions
    {
        void OnMovement2(InputAction.CallbackContext context);
        void OnTeclado(InputAction.CallbackContext context);
        void OnSalto(InputAction.CallbackContext context);
        void OnPunchLeft(InputAction.CallbackContext context);
        void OnPunchRight(InputAction.CallbackContext context);
        void OnTEST(InputAction.CallbackContext context);
        void OnTEST2(InputAction.CallbackContext context);
    }
}
